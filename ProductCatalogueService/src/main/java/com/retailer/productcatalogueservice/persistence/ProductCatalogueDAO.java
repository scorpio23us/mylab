package com.retailer.productcatalogueservice.persistence;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.retailer.productcatalogueservice.ProductItem;
import com.retailer.productcatalogueservice.common.PropertyHelper;
import com.retailer.productcatalogueservice.common.ServiceLocator;

public class ProductCatalogueDAO {

	private static final String CFG_FILE = "cfg.file";
	private static ProductCatalogueDAO persistenceToTables = new ProductCatalogueDAO();

	private Connection con;
	
	{
		try {
			con = establishDbConnection();
			triggerDbTableCreationIfDoesNotExist();
		} catch (ClassNotFoundException | SQLException | IOException e) {
			e.printStackTrace();
		}
	}
	private PropertyHelper	propertyHelper;

	private ProductCatalogueDAO() {/*Singleton so unexposed*/}

	public static ProductCatalogueDAO getInstance() {
		return persistenceToTables;
	}

	private Connection establishDbConnection() throws SQLException, ClassNotFoundException, IOException {

		if (con != null) {
			return con;
		}

		String propertiesFile = System.getProperty(CFG_FILE);
		propertyHelper = PropertyHelper.getInstance(propertiesFile);
		con = ServiceLocator.getInstance().getDBConnection(propertyHelper.getProperties(), propertyHelper.getDBProperties());

		return con;
	}

	private void triggerDbTableCreationIfDoesNotExist() throws IOException, ClassNotFoundException, SQLException {
		Statement stmt = con.createStatement();
		stmt.execute("create table IF NOT EXISTS productcatalogue (barcodeid int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
				+ " name nvarchar(40), type nvarchar(40), desc nvarchar(70),"
				+ " primary key(name, type,desc))");

		stmt.close();
	}

	public void insert(ProductItem item) throws SQLException {
		if ( !checkIfExists(item) ) {
			Statement stmt = con.createStatement();
		    int t = stmt.executeUpdate("insert into productcatalogue values(identity()+1,'"+item.getName()+"','"+item.getType()+"','"+item.getDesc()+"')");
			stmt.close();
		}
	}

	public List<ProductItem> selectProducts() throws SQLException {
		Statement stmt = con.createStatement();
		List<ProductItem> list = new ArrayList<>();
		ResultSet rs = stmt.executeQuery("select barcodeid, name, type, desc from productcatalogue");
		while (rs.next()) {
			ProductItem item = new ProductItem();
			item.setDesc(rs.getNString(4));
			item.setType(rs.getNString(3));
			item.setName(rs.getNString(2));
			item.setBarcodeid(rs.getInt(1));
			list.add(item);
		}
		stmt.close();
		return list;
	}

	public List<ProductItem> selectProductsBasedOnType(String type) throws SQLException {
		Statement stmt = con.createStatement();
		List<ProductItem> list = new ArrayList<>();
		ResultSet rs = stmt.executeQuery("select barcodeid, name, type, desc from productcatalogue where type='"+ type +"'");
		while (rs.next()) {
			ProductItem item = new ProductItem();
			item.setDesc(rs.getNString(4));
			item.setType(rs.getNString(3));
			item.setName(rs.getNString(2));
			item.setBarcodeid(rs.getInt(1));
			
			list.add(item);
		}
		stmt.close();
		return list;
	}

	public void removeProduct(ProductItem item) throws SQLException {
		Statement stmt = con.createStatement();
		int count = stmt.executeUpdate("delete from productcatalogue where name='"+item.getName()+"' AND "
				+ "type='"+ item.getType() +"' AND desc='"+item.getDesc()+"'");
		stmt.close();
	}

	private boolean checkIfExists(ProductItem item) throws SQLException {
		Statement stmt = con.createStatement();
		System.out.println("Connection -> "+con);
		System.out.println("Statement -> "+stmt);
		ResultSet rs = stmt.executeQuery("select barcodeid, name, type, desc from productcatalogue where type='"+ item.getType() +"' AND "
				+ "name='"+item.getName()+"' AND desc='"+item.getDesc()+"'");

		boolean itemFound = false;
		while (rs.next()) {
			itemFound = true;
		}
		stmt.close();
		return itemFound;
	}
}
